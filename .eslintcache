[{"C:\\Users\\Dor\\Dev\\Projects\\React\\Digital-signature\\digital-signature-client\\src\\index.js":"1","C:\\Users\\Dor\\Dev\\Projects\\React\\Digital-signature\\digital-signature-client\\src\\App.js":"2","C:\\Users\\Dor\\Dev\\Projects\\React\\Digital-signature\\digital-signature-client\\src\\reportWebVitals.js":"3","C:\\Users\\Dor\\Dev\\Projects\\React\\Digital-signature\\digital-signature-client\\src\\services\\pdfService.js":"4","C:\\Users\\Dor\\Dev\\Projects\\React\\Digital-signature\\digital-signature-client\\src\\pages\\CreatePdf.js":"5","C:\\Users\\Dor\\Dev\\Projects\\React\\Digital-signature\\digital-signature-client\\src\\pages\\EditPdf.js":"6"},{"size":606,"mtime":1610037454714,"results":"7","hashOfConfig":"8"},{"size":568,"mtime":1610296073911,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":461,"mtime":1610274573865,"results":"11","hashOfConfig":"8"},{"size":4993,"mtime":1610294995403,"results":"12","hashOfConfig":"8"},{"size":7460,"mtime":1610296648046,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1s3u3wg",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"28","usedDeprecatedRules":"16"},"C:\\Users\\Dor\\Dev\\Projects\\React\\Digital-signature\\digital-signature-client\\src\\index.js",[],["29","30"],"C:\\Users\\Dor\\Dev\\Projects\\React\\Digital-signature\\digital-signature-client\\src\\App.js",[],"C:\\Users\\Dor\\Dev\\Projects\\React\\Digital-signature\\digital-signature-client\\src\\reportWebVitals.js",[],"C:\\Users\\Dor\\Dev\\Projects\\React\\Digital-signature\\digital-signature-client\\src\\services\\pdfService.js",[],"C:\\Users\\Dor\\Dev\\Projects\\React\\Digital-signature\\digital-signature-client\\src\\pages\\CreatePdf.js",["31"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport * as pdfjsLib from 'pdfjs-dist/build/pdf';\r\nimport pdfjsWorker from 'pdfjs-dist/build/pdf.worker.entry';\r\nimport { savePdf } from '../services/pdfService';\r\n\r\npdfjsLib.GlobalWorkerOptions.workerSrc = pdfjsWorker;\r\n\r\nlet ctx;\r\nlet page;\r\nlet renderCtx;\r\nconst file = new FileReader();\r\n\r\n\r\nconst initialStyle = {\r\n    left: (window.innerWidth - 85) + 'px',\r\n    top: (window.innerHeight - 165) + 'px',\r\n    width: 80 + 'px',\r\n    height: 160 + 'px',\r\n    inputWidth: 200 + 'px',\r\n    inputHeight: 50 + 'px',\r\n    inputFontSize: 25 + 'px'\r\n}\r\n\r\n\r\nexport const CreatePdf = () => {\r\n    const canvasRef = useRef();\r\n    const fileName = useRef('file.png');\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [link, setLink] = useState();\r\n    const [navPosition, setNavPosition] = useState(initialStyle);\r\n    const [phoneNumber, setPhoneNumber] = useState('');\r\n\r\n    useEffect(() => {\r\n        if (!window.visualViewport) return;\r\n        window.visualViewport.addEventListener(\"resize\", viewportHandler);\r\n        window.visualViewport.addEventListener(\"scroll\", viewportHandler);\r\n\r\n        return (() => {\r\n            window.visualViewport.removeEventListener(\"resize\", viewportHandler);\r\n            window.visualViewport.removeEventListener(\"scroll\", viewportHandler);\r\n        })\r\n    }, [])\r\n\r\n    const viewportHandler = (e) => {\r\n        const style = {\r\n            left: (e.target.width + e.target.offsetLeft - 85 * (1 / e.target.scale)) + 'px',\r\n            top: (e.target.height + e.target.offsetTop - 165 * (1 / e.target.scale)) + 'px',\r\n            width: 80 * (1 / e.target.scale) + 'px',\r\n            height: 160 * (1 / e.target.scale) + 'px',\r\n            inputWidth: 200 * (1 / e.target.scale) + 'px',\r\n            inputHeight: 50 * (1 / e.target.scale) + 'px',\r\n            inputFontSize: 25 * (1 / e.target.scale) + 'px'\r\n        }\r\n        setNavPosition(style);\r\n    }\r\n\r\n    useEffect(() => {\r\n        ctx = canvasRef.current.getContext('2d');\r\n    }, [canvasRef])\r\n\r\n    useEffect(() => {\r\n        if (!link) return;\r\n        const number = phoneNumber ? `/972${phoneNumber.slice(1)}` : '';\r\n        if ('share' in navigator || number) window.open(`https://wa.me${number}/?text=${encodeURIComponent(`${link} חתימה דיגיטלית`)}`);\r\n        else window.open(`https://web.whatsapp.com/send?text=${encodeURIComponent(`${link} חתימה דיגיטלית`)}`);\r\n    }, [link])\r\n\r\n    const handlePdf = async (e) => {\r\n        await setLink(null);\r\n        file.onload = () => {\r\n            fileName.current = e.target.files[0].name.split('.')[0];\r\n            onRenderCtx(file.result);\r\n        }\r\n\r\n\r\n        if (e.target.files.length) await file.readAsDataURL(e.target.files[0])\r\n    }\r\n\r\n    async function onRenderCtx(data) {\r\n        const doc = await pdfjsLib.getDocument(data).promise;\r\n        page = await doc.getPage(1);\r\n        const viewport = await page.getViewport({ scale: 2 });\r\n        canvasRef.current.height = viewport.height;\r\n        canvasRef.current.width = viewport.width;\r\n\r\n        renderCtx = {\r\n            canvasContext: ctx,\r\n            viewport\r\n        }\r\n\r\n        await page.render(renderCtx).promise;\r\n    }\r\n\r\n    async function onSavePdf() {\r\n        if (!file.result) return;\r\n        setIsLoading(true);\r\n        try {\r\n            const pdfToSave = { data: file.result, name: fileName.current }\r\n            const savedPdf = await savePdf(pdfToSave);\r\n            setLink(window.location.origin + '/preview/' + savedPdf._id);\r\n        }\r\n        finally {\r\n            setIsLoading(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"create-pdf-container\">\r\n            <div className=\"nav-wrapper\" style={navPosition}>\r\n\r\n                <div className=\"actions flex column space-between\">\r\n                    <input className=\"pdf-input\" id=\"pdf-file-input\" type=\"file\" accept=\"application/pdf\" onChange={handlePdf} hidden />\r\n                    <label className=\"upload\" htmlFor=\"pdf-file-input\">\r\n                        <div />\r\n                    </label>\r\n                    <div className={`link ${isLoading ? 'loading' : ''}`} onClick={onSavePdf} />\r\n                    <input\r\n                        className=\"phone-number\"\r\n                        pattern=\"[0-9]{9-10}\"\r\n                        value={phoneNumber}\r\n                        maxLength=\"10\"\r\n                        placeholder=\"מספר טלפון\"\r\n                        type=\"tel\"\r\n                        style={{ width: navPosition.inputWidth, height: navPosition.inputHeight, fontSize: navPosition.inputFontSize }}\r\n                        onChange={(e) => setPhoneNumber(e.target.value.replace(/[^\\d]/, ''))} />\r\n                </div>\r\n\r\n            </div>\r\n            <div className=\"canvas-container\">\r\n                <canvas ref={canvasRef} className=\"pdf-canvas\"></canvas>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","C:\\Users\\Dor\\Dev\\Projects\\React\\Digital-signature\\digital-signature-client\\src\\pages\\EditPdf.js",["32","33"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport * as pdfjsLib from 'pdfjs-dist/build/pdf';\r\nimport pdfjsWorker from 'pdfjs-dist/build/pdf.worker.entry';\r\nimport { getPdf, savePdf } from '../services/pdfService';\r\n\r\npdfjsLib.GlobalWorkerOptions.workerSrc = pdfjsWorker;\r\n\r\nlet ctx;\r\nlet page;\r\nlet renderCtx;\r\n\r\nconst initialStyle = {\r\n    left: (window.innerWidth - 85) + 'px',\r\n    top: (window.innerHeight - 245) + 'px',\r\n    width: 80 + 'px',\r\n    height: 240 + 'px',\r\n}\r\n\r\nexport const EditPdf = (props) => {\r\n    const pdfId = props.match.params.id;\r\n    const loadedPdf = useRef();\r\n    const canvasRef = useRef();\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [isEditMode, setIsEditMode] = useState(false);\r\n    const [navPosition, setNavPosition] = useState(initialStyle);\r\n    const [isPdfEdited, setIsPdfEdited] = useState();\r\n\r\n\r\n    useEffect(() => {\r\n        window.visualViewport.addEventListener(\"resize\", viewportHandler);\r\n        window.visualViewport.addEventListener(\"scroll\", viewportHandler);\r\n\r\n        return (() => {\r\n            window.visualViewport.removeEventListener(\"resize\", viewportHandler);\r\n            window.visualViewport.removeEventListener(\"scroll\", viewportHandler);\r\n        })\r\n    }, [])\r\n\r\n    const viewportHandler = (e) => {\r\n        const style = {\r\n            left: (e.target.width + e.target.offsetLeft - 85 * (1 / e.target.scale)) + 'px',\r\n            top: (e.target.height + e.target.offsetTop - 245 * (1 / e.target.scale)) + 'px',\r\n            width: 80 * (1 / e.target.scale) + 'px',\r\n            height: 240 * (1 / e.target.scale) + 'px',\r\n        }\r\n        setNavPosition(style);\r\n    }\r\n\r\n    useEffect(() => {\r\n        ctx = canvasRef.current.getContext('2d', { desynchronized: true });\r\n        onGetPdf();\r\n    }, [canvasRef])\r\n\r\n\r\n\r\n    async function onGetPdf() {\r\n        setIsLoading(true);\r\n        loadedPdf.current = await getPdf(pdfId);\r\n        if (!loadedPdf.current) return;\r\n        setIsPdfEdited(loadedPdf.current.edited);\r\n        onRenderCtx(loadedPdf.current.data);\r\n        setIsLoading(false);\r\n    }\r\n\r\n    async function onRenderCtx(data) {\r\n        if (!loadedPdf.current.edited) {\r\n            const doc = await pdfjsLib.getDocument(data).promise;\r\n            page = await doc.getPage(1);\r\n            const viewport = await page.getViewport({ scale: 2 });\r\n            canvasRef.current.height = viewport.height;\r\n            canvasRef.current.width = viewport.width;\r\n            renderCtx = {\r\n                canvasContext: ctx,\r\n                viewport\r\n            }\r\n            await page.render(renderCtx).promise;\r\n\r\n        } else {\r\n            const img = new Image;\r\n            img.onload = () => {\r\n                canvasRef.current.height = img.height;\r\n                canvasRef.current.width = img.width;\r\n                ctx.drawImage(img, 0, 0);\r\n            }\r\n            img.src = data;\r\n        }\r\n        console.log(window);\r\n        document.body.style.zoom=1.0\r\n    }\r\n\r\n    function onToggleEditMode() {\r\n        if (!loadedPdf.current.edited) setIsEditMode((prev) => !prev);\r\n    }\r\n\r\n    function handleMouseDraw(e) {\r\n        if (e.nativeEvent.which !== 1 || !isEditMode) return;\r\n        const offsetX = e.nativeEvent.offsetX;\r\n        const offsetY = e.nativeEvent.offsetY;\r\n        draw(offsetX, offsetY);\r\n    }\r\n\r\n    function handleTouchDraw(e) {\r\n        if (e.touches.length !== 1 || !isEditMode) return;\r\n        var x = e.touches[0].clientX - e.touches[0].target.offsetLeft;\r\n        var y = e.touches[0].clientY - e.touches[0].target.offsetTop;\r\n        draw(x, y);\r\n    }\r\n\r\n    function draw(x, y) {\r\n        ctx.lineWidth = 5;\r\n        ctx.lineCap = 'round';\r\n        ctx.lineTo(x, y);\r\n        ctx.stroke();\r\n    }\r\n\r\n    function finishPosition() {\r\n        if (!isEditMode) return;\r\n        ctx.beginPath();\r\n    }\r\n\r\n    async function clearCanvas() {\r\n        if (!page || loadedPdf.current.edited) return;\r\n        ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\r\n        await page.render(renderCtx).promise;\r\n    }\r\n\r\n\r\n    async function onUpdatePdf() {\r\n        if (!loadedPdf.current) return;\r\n        const data = canvasRef.current.toDataURL(\"image/png\");\r\n        setIsLoading(true);\r\n        setIsEditMode(false);\r\n        const updatedPdf = await savePdf({ ...loadedPdf.current, data });\r\n        loadedPdf.current = updatedPdf;\r\n        if (!loadedPdf.current) return;\r\n        setIsPdfEdited(loadedPdf.current.edited);\r\n        onRenderCtx(loadedPdf.current.data);\r\n        setIsLoading(false);\r\n\r\n\r\n        // function dataURLtoFile(dataurl, filename) {\r\n        //     let arr = dataurl.split(','),\r\n        //         mime = arr[0].match(/:(.*?);/)[1],\r\n        //         bstr = atob(arr[1]),\r\n        //         n = bstr.length,\r\n        //         u8arr = new Uint8Array(n);\r\n        //     console.log(u8arr);\r\n        //     while (n--) {\r\n        //         u8arr[n] = bstr.charCodeAt(n);\r\n        //     }\r\n        //     console.log(u8arr);\r\n        //     return new File([u8arr], filename, { type: mime });\r\n        // }\r\n\r\n\r\n        // const file = dataURLtoFile(data, fileName + '.png');\r\n        // console.log(file);\r\n        // const filesArray = [file];\r\n\r\n        // if (navigator.share) {\r\n        //     navigator.share({\r\n        //         files: filesArray,\r\n        //         text: fileName,\r\n        //     })\r\n        //         .then(() => console.log('Share was successful.'))\r\n        //         .catch((error) => console.log('Sharing failed', error));\r\n        // } else {\r\n        //     console.log(`Your system doesn't support sharing files.`);\r\n        // }\r\n\r\n    }\r\n\r\n    function onDownloadPdf() {\r\n        const fileName = (loadedPdf?.current?.name || 'קבלה') + '.png';\r\n        const a = document.createElement('a');\r\n        a.href = canvasRef.current.toDataURL();\r\n        a.download = fileName;\r\n        a.click();\r\n    }\r\n\r\n    return (\r\n        <div className=\"edit-pdf-container\">\r\n            <div className=\"nav-wrapper\" style={navPosition && { ...navPosition }}>\r\n                <div className={`actions flex column ${(isPdfEdited || isLoading) ? 'justify-end' : 'space-between'}`}>\r\n                    <button className={`edit ${isEditMode ? 'active' : ''}`} onClick={onToggleEditMode} hidden={isPdfEdited || isLoading} />\r\n                    <button className=\"reset\" onClick={clearCanvas} hidden={isPdfEdited || isLoading} />\r\n                    {!isPdfEdited ?\r\n                        <button className={`done ${isLoading ? 'loading' : ''}`} onClick={onUpdatePdf} /> :\r\n                        <>\r\n                            <div className=\"saved-successfuly flex align-center justify-center\" ><p style={{ fontSize: navPosition.width }}>נשמר בהצלחה!</p></div>\r\n                            <button className=\"download\" onClick={onDownloadPdf} />\r\n                        </>}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"canvas-container\">\r\n                <canvas ref={canvasRef} className=\"pdf-canvas\" onMouseDown={handleMouseDraw} onMouseMove={handleMouseDraw}\r\n                    onMouseUp={finishPosition} onTouchStart={handleTouchDraw} onTouchMove={handleTouchDraw}\r\n                    onTouchEnd={finishPosition} style={{ touchAction: isEditMode ? 'none' : 'auto' }}></canvas>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n",{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":66,"column":8,"nodeType":"40","endLine":66,"endColumn":14,"suggestions":"41"},{"ruleId":"38","severity":1,"message":"42","line":53,"column":8,"nodeType":"40","endLine":53,"endColumn":19,"suggestions":"43"},{"ruleId":"44","severity":1,"message":"45","line":80,"column":25,"nodeType":"46","messageId":"47","endLine":80,"endColumn":34,"fix":"48"},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'phoneNumber'. Either include it or remove the dependency array.","ArrayExpression",["51"],"React Hook useEffect has a missing dependency: 'onGetPdf'. Either include it or remove the dependency array.",["52"],"new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"53","text":"54"},"no-global-assign","no-unsafe-negation",{"desc":"55","fix":"56"},{"desc":"57","fix":"58"},[2708,2708],"()","Update the dependencies array to be: [link, phoneNumber]",{"range":"59","text":"60"},"Update the dependencies array to be: [canvasRef, onGetPdf]",{"range":"61","text":"62"},[2458,2464],"[link, phoneNumber]",[1819,1830],"[canvasRef, onGetPdf]"]